# Tracil Cursor Rules (Monorepo: Next.js Frontend + Python Backend)

You are an expert full-stack developer working on Tracil, an AI-powered clinical data lineage platform. Follow these rules strictly to maintain consistency and quality.

## Critical Constraints (Never Violate)
- **NO server-side file persistence** - processing must be ephemeral only
- **NO LLM API keys in frontend code** - all AI keys isolated in Python backend environment  
- **NO heavy file parsing in browser** - delegate all processing to Python backend
- **NO direct LLM calls from frontend** - only proxy through Next.js API routes

## Architecture & Ownership (Monorepo)

**Frontend (`frontend/` folder)** - Next.js 15.4.6 + React 19.1.0 + TypeScript 5.6+
- **Structure:** App Router in `app/`, shared UI in `components/`, hooks in `hooks/`
- **State Management:** React hooks only (useState, useCallback, useMemo) - NO Zustand
- **API Integration:** Next.js routes in `app/api/ai/` proxy to Python backend
- **Data Structure:** Source-agnostic, CDISC-first organization (SDTM, ADaM, CRF, TLF, Protocol)
- **Testing:** 136 tests with axe-core accessibility testing
- **Accessibility:** WCAG 2.2 AA compliance mandatory

**Backend (`backend/` folder)** - Python 3.8+ + FastAPI 0.116.1 + OpenAI GPT
- **Required Endpoints:** `POST /process-files`, `POST /analyze-variable`
- **File Processing:** XPT, SAS7BDAT, JSON, PDF, DOCX, RTF, XML via pyreadstat, lxml, PyMuPDF
- **AI Integration:** OpenAI GPT 1.101.0 for lineage analysis (privacy-first)
- **Session Management:** Ephemeral processing with automatic cleanup
- **Standards Support:** CDISC, USDM, aCRF preprocessing, TLF extraction

## Frontend Coding Standards (Enforced)

**Required Patterns:**
```typescript
// ✅ DO: Use named imports and explicit types
import { useState, useCallback, type ReactNode } from 'react'

interface Props {
  readonly data: Dataset[]
  readonly onSelect: (id: string) => void
}

export function Component({ data, onSelect }: Props): ReactNode {
  const [selected, setSelected] = useState<string | null>(null)
  
  const handleSelect = useCallback((id: string) => {
    setSelected(id)
    onSelect(id)
  }, [onSelect])
  
  return <div>...</div>
}

// ❌ DON'T: Avoid any, namespace imports, missing types
import * as React from 'react' // Wrong
export function Component(props: any) { ... } // Wrong
```

**TypeScript Rules:**
- Strict mode enabled, no `any` types allowed
- Use `ReactNode` return type, not `JSX.Element`
- Explicit function signatures for all exports
- Prefer `interface` over `type` for object shapes

**Performance Rules:**
- Wrap expensive operations in `useMemo`/`useCallback`
- Use `React.memo` for components that re-render frequently
- Avoid creating objects/functions in render

## Backend Coding Standards

**API Contract (Required):**
```python
@app.post("/process-files")
async def process_files(files: List[UploadFile]) -> Dict[str, Any]:
    """Process files and return CDISC-organized structure"""
    return {
        "standards": {"SDTM": {...}, "ADaM": {...}},
        "metadata": {"sourceFiles": [...]}
    }

@app.post("/analyze-variable") 
async def analyze_variable(request: AnalyzeVariableRequest) -> Dict[str, Any]:
    """Generate AI-powered variable lineage analysis"""
    pass
```

## UI/UX Standards (Frontend Only)

**Design System:**
- **Components:** shadcn/ui + custom components
- **Styling:** Tailwind CSS v4 with OKLCH colors
- **Layout:** Fixed 260px left sidebar on md+ screens (`md:grid-cols-[260px_1fr]`)
- **Responsive:** Mobile-first approach with proper breakpoints
- **Dark mode:** Full support with CSS variables

**Color System (OKLCH):**
```css
/* globals.css - Centralized color tokens */
:root {
  --primary: oklch(0.45 0.15 250);
  --surface: oklch(0.98 0.01 250);
  --accent-sdtm: oklch(0.55 0.15 210);
  --accent-adam: oklch(0.60 0.12 150);
}

/* Tailwind usage */
.bg-primary { background: var(--primary); }
```

**Accessibility Requirements (WCAG 2.2 AA - Non-negotiable):**
- All interactive elements must support keyboard navigation
- Proper ARIA labels and roles required
- Screen reader compatibility tested with axe-core
- Color contrast ratio ≥ 4.5:1
- Focus management in modals and dropdowns

## LLM Integration (Backend Only)

**Implementation (OpenAI GPT 1.101.0):**
```python
# ✅ DO: Privacy-first LLM usage
def analyze_lineage(variable: str, metadata_only: dict) -> dict:
    # Redact PII/PHI before sending to LLM
    sanitized_data = redact_sensitive_data(metadata_only)
    
    # Use metadata-only prompts (no raw data values)
    prompt = f"Analyze lineage for {variable} using metadata: {sanitized_data}"
    
    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response

# ❌ DON'T: Send raw data to LLMs
def bad_analyze(raw_dataset: pd.DataFrame):  # FORBIDDEN
    prompt = f"Analyze this data: {raw_dataset.to_string()}"  # Contains PII
```

**Privacy Rules:**
- Redact all PII/PHI before sending to LLM
- Use metadata-only prompts (no raw data values)
- Chunk large inputs and enforce token budgets
- Stream responses where supported

## File processing and validation
- **Backend**: Support XPT (v5), SAS7BDAT, XLSX, DOCX, PDF, RTF - AI developer's choice of libraries
- **Frontend**: No heavy parsing in browser; all processing delegated to Python backend
- **Backend**: Return source-agnostic CDISC structure organized by standards, not files
- **Backend**: Provide source file traceability with roles (primary/supplementary/validation)
- **Backend**: Include validation statuses (✔ / ❌ / Missing) and metadata for each dataset entity

## Testing & Quality Standards

**Frontend Testing (Required):**
```typescript
// ✅ DO: Test accessibility and keyboard navigation
import { render, screen } from '@testing-library/react'
import { axe, toHaveNoViolations } from 'jest-axe'

test('should be accessible', async () => {
  const { container } = render(<Component />)
  const results = await axe(container)
  expect(results).toHaveNoViolations()
})

test('should support keyboard navigation', () => {
  render(<Component />)
  const button = screen.getByRole('button')
  button.focus()
  fireEvent.keyDown(button, { key: 'Enter' })
  // Assert expected behavior
})
```

**Quality Gates (Before Every Commit):**
- [ ] TypeScript strict compilation (zero errors)
- [ ] ESLint accessibility rules (zero violations)  
- [ ] All tests passing (including accessibility tests)
- [ ] Performance budgets met
- [ ] Keyboard navigation verified
- [ ] Screen reader compatibility tested

**Test Commands:**
```bash
npm run test              # Unit tests
npm run test:a11y        # Accessibility tests  
npm run test:coverage    # Coverage report
npm run lint             # ESLint + TypeScript
```

**Current Status:** 136 tests passing (99.3% success rate)

## Git and CI (Monorepo)
- Conventional commits. Update `docs/` when schema or flows change.
- **Frontend**: Keep environment variables in `frontend/.env.local` (not committed). Document in `.env.example`.
- **Backend**: Keep environment variables in `backend/.env` (not committed). Document in `backend/.env.example`.

## Data Structure Principles (Source-Agnostic)
- **CDISC-First Organization**: Structure data by clinical standards (SDTM, ADaM, CRF, TLF), not source files
- **Source Flexibility**: Same structure works whether data comes from define.xml, spec sheets, or raw datasets
- **Traceability**: Each dataset entity links to source files with roles and extracted data details
- **Extensibility**: Easy to add new standards, file types, or source combinations
- **UI Compatibility**: Frontend components work with unified structure regardless of data source
- **Migration Support**: Backward compatibility layer for legacy file-centric approaches

## Integration & API Rules

**API Communication Pattern:**
```typescript
// Frontend API route (proxy pattern)
// frontend/app/api/ai/process-files/route.ts
export async function POST(request: NextRequest) {
  const formData = await request.formData()
  
  // Forward to Python backend
  const response = await fetch(`${PYTHON_BACKEND_URL}/process-files`, {
    method: 'POST',
    body: formData,
    signal: AbortSignal.timeout(120000) // 2 minute timeout
  })
  
  return NextResponse.json(await response.json())
}
```

**Error Handling (Required):**
```typescript
// ✅ DO: Comprehensive error handling with user feedback
try {
  const data = await processFiles(files)
  setUploadState({ isUploading: false, progress: 100 })
} catch (error) {
  setUploadState({ 
    isUploading: false, 
    error: error instanceof Error ? error.message : 'Upload failed'
  })
  // Show user-friendly error message
}

// ❌ DON'T: Silent failures
try {
  await processFiles(files)
} catch {
  // Silent failure - user has no feedback
}
```

## Development Workflow

**Environment Setup:**
```bash
# Frontend
cp frontend/.env.example frontend/.env.local
npm install
npm run dev

# Backend (AI Developer)  
cp backend/.env.example backend/.env
pip install -r requirements.txt
uvicorn main:app --reload
```

**Git Conventions:**
- Conventional commits format
- Feature branches from main
- Small, focused PRs
- Update docs when schema/flows change

## Key Reminders

1. **WCAG 2.2 AA compliance mandatory** - test with axe-core
2. **NO server-side file persistence** - ephemeral processing only
3. **Source-agnostic data structure** - organize by CDISC standards
4. **Comprehensive error handling** - meaningful user feedback
5. **Privacy-first LLM usage** - metadata only, no raw data

Follow these rules strictly. Ask for clarification if any requirement is unclear.
